ah=read_excel("ageandheight.xls")
View(ah)
head(ah)
str(ah)
summary(ah)
library(caTools)
plot(ah$age,ah$height,
xlab="age",ylab="height",main="scatter plot of age and height")
library(caTools)
split=sample.split(ah$height,SplitRatio=0.7)
trainingset=subset(ah,split==TRUE)
testset=subset(ah,split==FALSE)
head(trainingset)
head(testset)
LM=lm(formula=height~age,data=trainingset)
coef(LM)
summary(LM)
library(ggplot2)
yp=predict(LM,newdata=testset)
yp
ggplot()+geom_point(aes(x=trainingset$age,y=trainingset$height),colour='red')+
geom_line(aes(x=trainingset$age,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("age vs height")+xlab("age")+ylab("height")
ggplot()+geom_point(aes(x=testset$age,y=testset$height),colour='red')+
geom_line(aes(x=trainingset$age,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("age vs height")+xlab("age")+ylab("height")
library(readxl)
ah=read_excel("ageandheight.xls")
View(ah)
head(ah)
str(ah)
summary(ah)
plot(ah$age,ah$height,
xlab="age",ylab="height",main="scatter plot of age and height")
library(caTools)
split=sample.split(ah$height,SplitRatio=0.7)
trainingset=subset(ah,split==TRUE)
testset=subset(ah,split==FALSE)
head(trainingset)
head(testset)
LM=lm(formula=height~age,data=trainingset)
coef(LM)
summary(LM)
yp=predict(LM,newdata=testset)
yp
library(ggplot2)
ggplot()+geom_point(aes(x=trainingset$age,y=trainingset$height),colour='red')+
geom_line(aes(x=trainingset$age,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("age vs height")+xlab("age")+ylab("height")
ggplot()+geom_point(aes(x=testset$age,y=testset$height),colour='red')+
geom_line(aes(x=trainingset$age,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("age vs height")+xlab("age")+ylab("height")
data("mtcars")
head(mtcars)
str(mtcars)
summary(mtcar)
summary(mtcars)
plot(mtcars$hp,mtcars$mpg,
xlab="hp",ylab="mpg",
main="hp vs mpg")
split=sample.split(mtcars$mpg,SplitRatio = 0.7)
trainingset=subset(mtcars,split==TRUE)
testset=subset(mtcars,split==FALSE)
head(trainingset)
head(testset)
data("mtcars")
head(mtcars)
str(mtcars)
summary(mtcars)
plot(mtcars$hp,mtcars$mpg,
xlab="hp",ylab="mpg",
main="hp vs mpg")
library(caTools)
split=sample.split(mtcars$mpg,SplitRatio = 0.7)
trainingset=subset(mtcars,split==TRUE)
testset=subset(mtcars,split==FALSE)
head(trainingset)
head(testset)
LM=lm(formula = mpg~hp,data=trainingset)
coef(LM)
summary(LM)
yp=predict(LM,newdata=test)
yp=predict(LM,newdata=testset)
yp
library(ggplot2)
ggplot()+geom_point(aes(x=trainingset$hp,y=testset$mpg),colour='red')+
geom_line(aes(x=trainingset$hp,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=trainingset$hp,y=testset$mpg),colour='red')+
geom_line(aes(x=trainingset$hp,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=trainingset$hp,y=testset$mpg),colour='red')+
geom_line(aes(x=trainingset$hp,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=trainingset$hp,y=testset$mpg),colour='red')+geom_line(aes(x=trainingset$hp,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=trainingset$hp,y=trainingset$mpg),colour='red')+
geom_line(aes(x=trainingset$hp,y=predict(LM,newdata=trainingset)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=testset$hp,y=testset$mpg),colour='red')+
geom_line(aes(x=trainingset$hp,y=predict(LM,newdata = trainingset)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
data("iris")
head(iris)
str(iris)
summary(iris)
iris$species=as.numeric(iris$Species)
tail(iris$species)
library(caTools)
split=sample.split(iris,SplitRatio = 0.7)
train=subset(iris,split==TRUE)
test=subset(iris,split==FALSE)
LM=lm(formula=species~.,data=train)
coef(LM)
summary(LM)
yp=predict(LM,newdata=test)
yp
head(yp)
library(car)
avPlot(LM)
avPlots(LM)
df=read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(df)
sum(is.na(df))
df$rank=as.factor(df$rank)
lr=glm(admit~gre+gpa+rank,data=df,family="binomial")
summary(lr)
x=data.frame(gpa=790,gre=3.8,rank=as.factor(1))
p=predict(lr,x)
p
x=data.frame(gre=790,gpa=3.8,rank=as.factor(1))
p=predict(lr,x)
p
library(caTools)
library(dplyr)
library(party)
library(magrittr)
library(datasets)
data(readingSkills)
head(readingSkills)
str(readingSkills)
summary(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.7)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,train)
plot(model)
model=ctree(formula=nativeSpeaker~.,train)
plot(model)
library(caTools)
library(dplyr)
library(party)
library(magrittr)
library(datasets)
data(readingSkills)
head(readingSkills)
str(readingSkills)
summary(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.8)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,train)
plot(model)
model=ctree(nativeSpeaker~.,data=train)
plot(model)
library(caTools)
library(dplyr)
library(party)
library(magrittr)
library(datasets)
data(readingSkills)
head(readingSkills)
str(readingSkills)
summary(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.8)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,data=train)
plot(model)
model=ctree(nativeSpeaker~.,data=train)
plot(model)
yp=predict(model,test)
native=table(test$nativeSpeaker,yp)
native
library(caTools)
library(dplyr)
library(party)
library(magrittr)
library(datasets)
data(readingSkills)
head(readingSkills)
str(readingSkills)
summary(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.8)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,data=train)
plot(model)
yp=predict(model,test)
native=table(test$nativeSpeaker,yp)
native
library(rpart)
library(rpart.plot)
library(rpart)
library(rpart.plot)
data("iris")
head(iris)
decision_tree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Length+petal.Width,data=iris,method = "binomial")
decision_tree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=iris,method = "binomial")
decision_tree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=iris,method = "class")
print(decision_tree)
rpart.plot(decision_tree,main="decision tree for iris ")
library(caTools)
library(randomForest)
librar(dplyr)
library(dplyr)
library(randomForest)
library(dplyr)
library(readxl)
data=read_excel("RAISIN_DATASET.xlsx")
head(data)
str(data)
summary(data)
library(catools)
library(caTools)
sum(is.na(data))
data=mutate(data)
library(randomForest)
library(dplyr)
library(readxl)
data=read_excel("RAISIN_DATASET.xlsx")
head(data)
str(data)
sum(is.na(data))
summary(data)
data=mutate(data)
library(caTools)
split=sample.split(data$Class)
table(data$Class)
library(caTools)
split=sample.split(data$Class)
train=subset(data,split==TRUE)
test=subset(data,split==FALSE)
table(train$Class)
table(test$Class)
tree=randomForest(as.factor(train$Class)~.,data=train,mytr=5,ntree=2000,importance=TRUE)
tree
summary(tree)
yp=predict(tree,newdata=test)
table(yp,test)
table(yp,test$Class)
importance(tree)
plot(tree)
varImpPlot(tree)
library(caTools)
library(caret)
library(e1071)
data(iris)
head(iris)
str(iris)
summary(iris)
table(iris$Species)
split=sample.split(iris$Species,SplitRatio = 0.7)
train=subset(iris,split==TRUE)
test=subset(iris,split==FALSE)
table(train$Species)
table(test$Species)
model=naiveBayes(formula=train$Species~.,data=train)
model
yp=predict(model,newdata = test)
yp
cm=table(yp,test$Species)
confusionMatrix(cm)
gc()
df=read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
df(head)
head(df)
sum(is,na(df))
sum(is.na(df))
df$rank=as.factor(df$rank)
lr=glm(admit~gre+gpa+rank,data=df,family='binomial')
summary(lr)
x=data.frame(gre=790,gpa=3.8,rank=as.factor(1))
predict(lr,x)
library(caTools)
library(datasets)
library(party)
library(magrittr)
library(dplyr)
data("readingSkills")
head(readingSkills)
str(readingSkills)
summary(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.8)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,train)
plot(model)
yp=predict(model,test)
yp
native=table(test$nativeSpeaker,yp)
native
library(caTools)
library(datasets)
library(party)
library(magrittr)
library(dplyr)
data("readingSkills")
head(readingSkills)
str(readingSkills)
summary(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.8)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,data=train)
plot(model)
yp=predict(model,test)
yp
native=table(test$nativeSpeaker,yp)
native
library(datasets)
library(caTools)
library(party)
library(magrittr)
library(dplyr)
data("readingSkills")
head(readingSkills)
split=sample.split(readingSkills,SplitRatio = 0.8)
train=subset(readingSkills,split==TRUE)
test=subset(readingSkills,split==FALSE)
model=ctree(nativeSpeaker~.,data=train)
plot(model)
yp=predict(model,test)
native=table(test$nativeSpeaker,yp)
native
library(rpart)
library(rpart.plot)
data(iris)
head(iris)
str(iris)
summary(iris)
decision_tree=rpart(Species~Sepal.Lenght+Sepal.Width+Petal.Leght+Petal.Width,data=iris,method='class')
decision_tree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Leght+Petal.Width,data=iris,method='class')
decision_tree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Legth+Petal.Width,data=iris,method='class')
decision_tree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=iris,method='class')
print(decision_tree)
rpart.plot(decision_tree,main="decsion tree for iris")
library(randomForest)
library(dplyr)
library(readxl)
data=read_excel("RAISIN_DATASET.xlsx")
head(data)
str(data)
summary(data)
sum(is.na(data))
data=mutate(data)
table(data$Class)
library(caTools)
split=sample.split(data$Class,SplitRatio = 0.7)
train=subset(data,split==TRUE)
test=subset(data,split==FALSE)
tree=randomForest(as.factor(train$Class)~.,data=train,mtyr=5,ntree=2000,importance=TRUE)
trees
tree
summary(tree)
yp=predict(tree,newdata=test)
yp
cm=table(yp,test$Class)
confusionMatrix(cm)
cm
plot(tree)
varImpPlot(tree)
library(caret)
library(caTools)
library(e1701)
library(e1071)
data(iris)
head(iris)
str(head)
summary(head)
str(iris)
summary(iris)
table(iris$Species)
split=sample.split(iris$Species,SplitRatio = 0.7)
train=subset(iris,split==TRUE)
test=subset(iris,split==FALSE)
model=naiveBayes(formula=train$Species,data=train)
model=naiveBayes(formula=train$Species~.,,data=train)
model=naiveBayes(formula=train$Species~.,data=train)
model
summary(model)
yp=predict(model,newdata =test)
yp
cm=table(yp,test$Species)
confusionMatrix(cm)
library(caTools)
library(caret)
library(class)
data("iris")
head(iris)
str(iris)
summary(iris)
table(iris$Species)
split=sample.split(iris$Species,SplitRatio = 0.7)
train=subset(iris,split==TRUE)
test=ssubset(iris,split==FALSE)
test=subset(iris,split==FALSE)
tanle(train$Species)
table(train$Species)
table(test$Species)
train_scale=scale(train[,1:4])
test_model=scale(test[,1:4])
model=knn(train=train_scale,test=test_scale,cl=train$Species,k=3)
model=knn(train=train_scale,test=test_model,cl=train$Species,k=3)
model
cm=table(model,test$Species)
cm
confusionMatrix(cm)
library(caTools)
library(caTools)
library(class)
library(caret)
library(readxl)
data=read_excel("Raisin_Dataset.xlsx")
head(data)
str(data)
summary(data)
table(data$Class)
split=sample.split(data$Class,SplitRatio = 0.7)
train=subset(data,split==TRUE)
test=subset(data,split==FALSE)
table(train$Class)
table(test$Class)
train_scale=scale(train[,1:7])
test_scale=scale(test[,1:7])
model=knn(train=train_scale,test=test_scale,cl=data$Class,k=3)
model=knn(train=train_scale,test=test_scale,cl=train$Class,k=3)
cm=table(model,test$Class)
confusionMatrix(cm)
data(iris )
head(iris)
str(iris)
summary(iris)
iris$species=as.numeric(iris$Species)
tail(iris$species)
library(caTools)
split=sample.split(iris,SplitRatio = 0.7)
train=subset(iris,split==TRUE)
test=subset(iris,split==FALSE)
LM=lm(formula=species~.,data=train)
ceof(LM)
coef(LM)
summary(LM)
yp=predict(LM,newdata = test)
yp
library(car)
avPlot(LM)
avPlots(LM)
library(readxl)
ah=read_excel("ageandheight.xls")
View(ah)
head(ah)
str(ah)
summary(ah)
plot(ah$age,ah$height,
xlab="age",ylab="height",main="scatter plot of age and height")
library(caTools)
split=sample.split(ah$height,SplitRatio = 0.7)
trainingset=subset(ah,split==TRUE)
testset=subset(ah,split==FALSE)
LM=lm(formula=height~age,data =train)
LM=lm(formula=height~age,data=train)
LM=lm(formula=height~age,data=trainingset)
coef(LM)
summary(LM)
yp=predict(LM,newdata = test)
yp=predict(LM,newdata = testset)
yp
library(ggplot2)
ggplot()+geom_point(aes(x=trainingset$age,y=trainingset$height),colour='red')+
geom_line(aes(x=trainingset$age,y=predict(LM,newdata = trainingset)),colour='blue')+
ggtitle("age vs height")+xlab("age")+ylab("height")
ggplot()+geom_point(aes(x=testset$age,y=testset$height),colour='red')+
geom_line(aes(x=trainingset$age,y=predict(LM,newdata = trainingset)),colour='blue')+
ggtitle("age vs height")+xlab("age")+ylab("height")
data("mtcars")
head(mtcars)
str(mtcars)
summary(mtcars)
plot(mtcars$hp,mtcars$mpg,xlab="hp",ylab="mpg",main="hp vs mpg")
library(caTools)
split=sample.split(mtcars$mpg,SplitRatio = 0.7)
train=subset(mtcars,split==TRUE)
test=subset(mtcars,split==FALSE)
LM=lm(formula=mpg~hp,data =train)
coef(LM)
summary(LM)
yp=predict(LM,newdata=test)
yp
library(ggplot2)
ggplot()+geom_point(aes(x=traint$hp,y=trains$mpg),colour='red')+
geom_line(aes(x=train$hp,y=predict(LM,newdata = train)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=train$hp,y=trains$mpg),colour='red')+
geom_line(aes(x=train$hp,y=predict(LM,newdata = train)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=train$hp,y=train$mpg),colour='red')+
geom_line(aes(x=train$hp,y=predict(LM,newdata = train)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
ggplot()+geom_point(aes(x=test$hp,y=test$mpg),colour='red')+
geom_line(aes(x=train$hp,y=predict(LM,newdata = train)),colour='blue')+
ggtitle("hp vs mpg")+xlab("hp")+ylab("mpg")
